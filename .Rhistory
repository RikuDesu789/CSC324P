cat(result, "\n")
# Concatenate name and age with a space separator
name <- "John"
age <- 30
result <- paste(name, "is", age, "years old")
cat(result)
# Concatenate first_name and last_name without a separator
result <- paste0(name, "is", age, "years old")
cat(result)
result <- paste(name, "is", age, "yearsold")
cat(result)
# Concatenate name and age with a space separator
name <- "Riku"
age <- 23
result <- paste(name, "is", age)
cat(result)
# Concatenate first_name and last_name without a separator
result <- paste0(name, "is", age)
cat(result)
# Concatenate name and age with a space separator
result <- paste(Riku, "is", 23)
cat(result)
# Concatenate name and age with a space separator
result <- paste(Riku, "is", 23)
# Concatenate name and age with a space separator
result <- paste("Riku", "is", 23)
cat(result)
# Concatenate name and age with a space separator
result <- paste("Riku", "is", 23)
cat(result)
# Concatenate first_name and last_name without a separator
result <- paste0("Riku", "is", 23)
cat(result)
# Concatenate name and age with a space separator
result <- paste("Riku", "is", "happy")
cat(result)
# Concatenate first_name and last_name without a separator
result <- paste0("Riku", "is", "happy")
cat(result)
# Concatenate with a space separator
result <- paste("Riku", "is", "happy")
cat(result)
# Concatenate without a separator
result <- paste0("Riku", "is", "happy")
cat(result)
server <- function(input, output, session) {
}
ui <- fluidPage(
fluidRow(
column(6, offset=1,
h1("Title in one row")
)
),
fluidRow(
column(1,
actionButton("button", "Click")
),
column(6,
p("Row 2, Column 2 (button is col 1)")
)
)
)
shinyApp(ui = ui, server = server)
colnames(df)
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
summary_full <- summary(df)
# Summary of the subset data
summary_subset <- summary(subset_df)
# Compare summaries
print("Summary of Full Data:")
print(summary_full)
print("\nSummary of Subset Data:")
print(summary_subset)
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full Data)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset Data)")
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset)")
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset)")
# Create a 2D density plot from the scatter plot created in the previous task
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_density_2d() +
labs(title = "2D Density Plot: Lead Time vs. ADR (Full)")
colnames(df)
subset_df <- df %>%
sample_frac(0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset)")
subset_df = sample_frac(df, 0.2, replace = FALSE)
subset_df = sample_frac(df, 0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset)")
subset_df = sample_frac(df, 0.2, replace = FALSE)
# Summary of the subset and full data
summary_full <- summary(df)
summary_subset <- summary(subset_df)
print(summary_full)
print(summary_subset)
# Scatter plot for full data
ggplot(data = df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Full)")
# Scatter plot for subset data
ggplot(data = subset_df, aes(x = lead_time, y = adr)) +
geom_point() +
labs(title = "Lead Time vs. ADR (Subset)")
library(dplyr)
subset_df = sample_frac(df, 0.2, replace = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
# Load the data
df <- read.csv("/Users/rikusmriga/Desktop/csc324/CSC324P/data/hotel_bookings.csv")
# Define the UI
ui <- fluidPage(
titlePanel("Bar Plot Selector"),
sidebarLayout(
sidebarPanel(
selectInput("column_name", "Select Column:", choices = colnames(df)),
hr(),
helpText("Choose a column.")
),
mainPanel(plotOutput("barPlot"))
)
)
# Define the server
server <- function(input, output) {
# Render a bar plot based on the selected column
output$barPlot <- renderPlot({
if (!is.null(input$column_name)) {
ggplot(df, aes(x = df[[input$column_name]])) +
geom_bar(fill = "blue", color = "black") +
labs(title = paste("Bar Plot of", input$column_name), y = "Count", x = input$column_name) +
theme_minimal()
}
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load the data
df <- read.csv("/Users/rikusmriga/Desktop/csc324/CSC324P/data/hotel_bookings.csv")
# Define the UI
ui <- fluidPage(
titlePanel("Bar Plot Selector"),
sidebarLayout(
sidebarPanel(
selectInput("column_name", "Select Column:", choices = colnames(df)),
hr(),
helpText("Choose a column.")
),
mainPanel(plotOutput("barPlot"))
)
)
# Define the server
server <- function(input, output) {
# Render a bar plot based on the selected column
output$barPlot <- renderPlot({
if (!is.null(input$column_name)) {
ggplot(df, aes(x = df[[input$column_name]])) +
geom_bar(fill = "blue", color = "black") +
labs(title = paste("Bar Plot of", input$column_name), y = "Count", x = input$column_name) +
theme_minimal()
}
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Conditional Panel Example"),
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Option 1", "Option 2"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Option 1'",
plotOutput("plot1")
),
conditionalPanel(
condition = "input.input === 'Option 2'",
plotOutput("plot2")
)
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
# Plot some data
})
output$plot2 <- renderPlot({
# Plot some other data
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
titlePanel("Conditional Panel Example"),
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Option 1", "Option 2"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Option 2'",
textInput("input2", "Enter something:")
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Conditional Panel Example"),
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Option 1", "Option 2"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Option 2'",
textInput("input2", "Enter something:")
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Show", "Hide"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Show'",
textInput("input2", "Enter something:")
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Show", "Hide"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Show'",
textInput("input2", "Dynamic text field")
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("input", "Select Option:", choices = c("Show", "Hide"))
),
mainPanel(
conditionalPanel(
condition = "input.input === 'Show'",
textInput("input1", "Dynamic text field")
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv("/Users/rikusmriga/Desktop/csc324/CSC324P/data/hotel_bookings.csv")
# Define the UI
ui <- fluidPage(
shinythemes::themeSelector(),
titlePanel("Hotel Bookings Analysis"),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot")),
downloadButton("download_data", "Download Data", class = "btn-primary")
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
)
),
tabPanel("Tab 1"),
tabPanel("Tab 2"),
tabPanel("Settings",
div(
id = "settings",
selectInput("app_theme", "Select App Theme:",
choices = c("Default", "Minimal", "Classic", "Dark", "Light")),
selectInput("text_size", "Select Text Size:",
choices = c("Small", "Medium", "Large")),
selectInput("font_color", "Select Font Color:",
choices = c("Black", "Red", "Blue", "Green")),
actionButton("apply_settings", "Apply Settings", class = "btn-primary"),
actionButton("reset_settings", "Reset Settings", class = "btn-secondary"),
style = "margin: 20px;"
)
)
)
)
# Define the server
server <- function(input, output, session) {
# Function to apply the selected settings
observeEvent(input$apply_settings, {
# Apply theme
if (input$app_theme == "Minimal") {
theme_selected <- theme_minimal()
} else if (input$app_theme == "Classic") {
theme_selected <- theme_classic()
} else if (input$app_theme == "Dark") {
theme_selected <- theme_dark()
} else if (input$app_theme == "Light") {
theme_selected <- theme_light()
} else {
theme_selected <- NULL
}
if (!is.null(theme_selected)) {
theme_set(theme_selected)
}
# Apply text size
if (input$text_size == "Small") {
text_size_selected <- "10px"
} else if (input$text_size == "Medium") {
text_size_selected <- "12px"
} else if (input$text_size == "Large") {
text_size_selected <- "16px"
} else {
text_size_selected <- NULL
}
if (!is.null(text_size_selected)) {
tags$style(HTML(paste(".control-group { font-size: ", text_size_selected, "; }")))
}
# Apply font color
if (input$font_color == "Black") {
font_color_selected <- "black"
} else if (input$font_color == "Red") {
font_color_selected <- "red"
} else if (input$font_color == "Blue") {
font_color_selected <- "blue"
} else if (input$font_color == "Green") {
font_color_selected <- "green"
} else {
font_color_selected <- NULL
}
if (!is.null(font_color_selected)) {
tags$style(HTML(paste(".control-group { color: ", font_color_selected, "; }")))
}
})
# Reset the settings when the "Reset Settings" button is clicked
observeEvent(input$reset_settings, {
theme_set(NULL)  # Reset the theme
tags$style(HTML(".control-group { font-size: 12px; }"))  # Reset text size
tags$style(HTML(".control-group { color: black; }"))     # Reset font color
})
# Create a custom data set base on the user input. This data will be the content of the downloadable csv
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render the selected plot (either scatter plot, bar plot, or a bar plot)
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as csv
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
df = read.csv("/Users/rikusmriga/Desktop/csc324/CSC324P/data/hotel_bookings.csv")
# Create a lookup table for converting the names
country_lookup <- data.frame(
country_code = c("PRT", "GBR", "USA", "ESP", "IRL", "FRA", "NULL", "ROU", "NOR", "OMN", "ARG", "POL", "DEU", "BEL", "CHE", "CN", "GRC", "ITA", "NLD", "DNK", "RUS", "SWE", "AUS", "EST", "CZE", "BRA", "FIN", "MOZ", "BWA", "LUX", "SVN", "ALB", "IND", "CHN", "MEX", "MAR", "UKR", "SMR", "LVA", "PRI", "SRB", "CHL", "AUT", "BLR", "LTU", "TUR", "ZAF", "AGO", "ISR", "CYM", "ZMB", "CPV", "ZWE", "DZA", "KOR", "CRI", "HUN", "ARE", "TUN", "JAM", "HRV", "HKG", "IRN", "GEO", "AND", "GIB", "URY", "JEY", "CAF", "CYP", "COL", "GGY", "KWT", "NGA", "MDV", "VEN", "SVK", "FJI", "KAZ", "PAK", "IDN", "LBN", "PHL", "SEN", "SYC", "AZE", "BHR", "NZL", "THA", "DOM", "MKD", "MYS", "ARM", "JPN", "LKA", "CUB", "CMR", "BIH", "MUS", "COM", "SUR", "UGA", "BGR", "CIV", "JOR", "SYR", "SGP", "BDI", "SAU", "VNM", "PLW", "QAT", "EGY", "PER", "MLT", "MWI", "ECU", "MDG", "ISL", "UZB", "NPL", "BHS", "MAC", "TGO", "TWN", "DJI", "STP", "KNA", "ETH", "IRQ", "HND", "RWA", "KHM", "MCO", "BGD", "IMN", "TJK", "NIC", "BEN", "VGB", "TZA", "GAB", "GHA", "TMP", "GLP", "KEN", "LIE", "GNB", "MNE", "UMI", "MYT", "FRO", "MMR", "PAN", "BFA", "LBY", "MLI", "NAM", "BOL", "PRY", "BRB", "ABW", "AIA", "SLV", "DMA", "PYF", "GUY", "LCA", "ATA", "GTM", "ASM", "MRT", "NCL", "KIR", "SDN", "ATF", "SLE", "LAO"),
country_name = c("Portugal", "United Kingdom", "United States", "Spain", "Ireland", "France", "NULL", "Romania", "Norway", "Oman", "Argentina", "Poland", "Germany", "Belgium", "Switzerland", "China", "Greece", "Italy", "Netherlands", "Denmark", "Russia", "Sweden", "Australia", "Estonia", "Czech Republic", "Brazil", "Finland", "Mozambique", "Botswana", "Luxembourg", "Slovenia", "Albania", "India", "China", "Mexico", "Morocco", "Ukraine", "San Marino", "Latvia", "Puerto Rico", "Serbia", "Chile", "Austria", "Belarus", "Lithuania", "Turkey", "South Africa", "Angola", "Israel", "Cayman Islands", "Zambia", "Cape Verde", "Zimbabwe", "Algeria", "Korea", "Costa Rica", "Hungary", "United Arab Emirates", "Tunisia", "Jamaica", "Croatia", "Hong Kong", "Iran", "Georgia", "Andorra", "Gibraltar", "Uruguay", "Jersey", "Central African Republic", "Cyprus", "Colombia", "Guernsey", "Kuwait", "Nigeria", "Maldives", "Venezuela", "Slovakia", "Fiji", "Kazakhstan", "Pakistan", "Indonesia", "Lebanon", "Philippines", "Senegal", "Seychelles", "Azerbaijan", "Bahrain", "New Zealand", "Thailand", "Dominican Republic", "North Macedonia", "Malaysia", "Armenia", "Japan", "Sri Lanka", "Cuba", "Cameroon", "Bosnia and Herzegovina", "Mauritius", "Comoros", "Suriname", "Uganda", "Bulgaria", "Ivory Coast", "Jordan", "Syria", "Singapore", "Burundi", "Saudi Arabia", "Vietnam", "Palau", "Qatar", "Egypt", "Peru", "Malta", "Malawi", "Ecuador", "Madagascar", "Iceland", "Uzbekistan", "Nepal", "Bahamas", "Macau", "Togo", "Taiwan", "Djibouti", "Sao Tome and Principe", "Saint Kitts and Nevis", "Ethiopia", "Iraq", "Honduras", "Rwanda", "Cambodia", "Monaco", "Bangladesh", "Isle of Man", "Tajikistan", "Nicaragua", "Benin", "British Virgin Islands", "Tanzania", "Gabon", "Ghana", "East Timor", "Guadeloupe", "Kenya", "Liechtenstein", "Guinea-Bissau", "Montenegro", "United States Minor Outlying Islands", "Mayotte", "Faroe Islands", "Myanmar", "Panama", "Burkina Faso", "Libya", "Mali", "Namibia", "Bolivia", "Paraguay", "Barbados", "Aruba", "Anguilla", "El Salvador", "Dominica", "French Polynesia", "Guyana", "Saint Lucia", "Antarctica", "Guatemala", "American Samoa", "Mauritania", "New Caledonia", "Kiribati", "Sudan", "French Southern and Antarctic Lands", "Sierra Leone", "Laos")
)
# Replace country codes with actual country names
df$country_name <- country_lookup$country_name[match(df$country, country_lookup$country_code)]
library(shiny)
library(leaflet)
library(rnaturalearth)
# Sample data with country names and booking_changes
data <- data.frame(
country = c("Portugal", "United Kingdom", "Spain", "France", "Germany"),
booking_changes = c(3, 4, 0, 0, 0)
)
# Get ISO country codes using rnaturalearth package
world <- ne_countries(scale = "medium", returnclass = "sf")

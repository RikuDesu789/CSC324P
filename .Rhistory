ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(5,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot"))
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
column(6,
downloadButton("download_data", "Download Data")
)
)
),
tabPanel("Tab 2",
# Content for Tab 2 goes here
p("This is the content for Tab 2.")
),
tabPanel("Tab 3",
# Content for Tab 3 goes here
p("This is the content for Tab 3.")
)
)
)
# Define the server
server <- function(input, output) {
# Create a reactive filtered dataset based on user inputs
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render the selected plot
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot"))
column(6,
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot")),
column(6,
downloadButton("download_data", "Download Data")
)
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
)
),
tabPanel("Tab 2",
# Content for Tab 2 goes here
p("This is the content for Tab 2.")
),
tabPanel("Tab 3",
# Content for Tab 3 goes here
p("This is the content for Tab 3.")
)
)
)
# Define the server
server <- function(input, output) {
# Create a reactive filtered dataset based on user inputs
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render the selected plot
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Create a pie chart of market segment distribution
df %>%
group_by(market_segment) %>%
summarise(total_bookings = n()) %>%
ggplot(aes(x = "", y = total_bookings, fill = market_segment)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
labs(title = "Market Segment Distribution")
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot")),
column(6,
downloadButton("download_data", "Download Data")
)
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
)
),
tabPanel("Tab 2",
p("Content for Tab 2.")
),
tabPanel("Tab 3",
p("Content for Tab 3.")
)
)
)
# Define the server
server <- function(input, output) {
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render visualization
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary stats
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download button for the CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
# Add a margin to improve readability
tags$style(HTML(".control-group { margin: 10px; }")),
# Add a theme selector
selectInput("theme", "Select Theme:",
choices = c("Default", "Minimal", "Classic", "Dark", "Light")),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot"))
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
column(6,
downloadButton("download_data", "Download Data")
)
)
),
tabPanel("Tab 2",
# Content for Tab 2 goes here
p("This is the content for Tab 2.")
),
tabPanel("Tab 3",
# Content for Tab 3 goes here
p("This is the content for Tab 3.")
)
)
)
# Define the server
server <- function(input, output, session) {
# Apply the selected theme
observe({
if (input$theme == "Minimal") {
theme_selected <- theme_minimal()
} else if (input$theme == "Classic") {
theme_selected <- theme_classic()
} else if (input$theme == "Dark") {
theme_selected <- theme_dark()
} else if (input$theme == "Light") {
theme_selected <- theme_light()
} else {
theme_selected <- NULL
}
if (!is.null(theme_selected)) {
theme_set(theme_selected)
}
})
# Create a reactive filtered dataset based on user inputs
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render the selected plot
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv(path)
# Define the UI
ui <- fluidPage(
titlePanel("Hotel Bookings Analysis"),
# Add a margin to improve readability
tags$style(HTML(".control-group { margin: 10px; }")),
tabsetPanel(
tabPanel("Visualization",
fluidRow(
column(4,
selectInput("x_value", "X-Axis Value:", choices = colnames(df)),
selectInput("y_value", "Y-Axis Value:", choices = colnames(df)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Scatter Plot", "Bar Plot", "Line Plot"))
),
column(8,
plotOutput("plot")
)
),
fluidRow(
column(6,
verbatimTextOutput("summary_stats")
),
column(6,
downloadButton("download_data", "Download Data")
)
)
),
tabPanel("Tab 2",
# Content for Tab 2 goes here
p("This is the content for Tab 2.")
),
tabPanel("Tab 3",
# Content for Tab 3 goes here
p("This is the content for Tab 3.")
)
),
# Add a theme button
actionButton("apply_theme", "Apply Theme"),
# Add a theme selector for the entire app
selectInput("app_theme", "Select App Theme:",
choices = c("Default", "Minimal", "Classic", "Dark", "Light"))
)
# Define the server
server <- function(input, output, session) {
# Apply the selected theme
observe({
if (input$app_theme == "Minimal") {
theme_selected <- theme_minimal()
} else if (input$app_theme == "Classic") {
theme_selected <- theme_classic()
} else if (input$app_theme == "Dark") {
theme_selected <- theme_dark()
} else if (input$app_theme == "Light") {
theme_selected <- theme_light()
} else {
theme_selected <- NULL
}
if (!is.null(theme_selected)) {
theme_set(theme_selected)
}
})
# Create a reactive filtered dataset based on user inputs
filtered_data <- reactive({
filtered_df <- df
if (!is.null(input$x_value) && !is.null(input$y_value)) {
filtered_df <- filtered_df %>%
select(all_of(input$x_value), all_of(input$y_value))
}
return(filtered_df)
})
# Render the selected plot
output$plot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_point() +
labs(x = input$x_value, y = input$y_value, title = "Scatter Plot")
} else if (input$plot_type == "Bar Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], fill = .data[[input$y_value]])) +
geom_bar() +
labs(x = input$x_value, y = "Count", title = "Bar Plot")
} else if (input$plot_type == "Line Plot") {
ggplot(filtered_data(), aes(x = .data[[input$x_value]], y = .data[[input$y_value]])) +
geom_line() +
labs(x = input$x_value, y = input$y_value, title = "Line Plot")
}
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data())
})
# Download filtered data as CSV
output$download_data <- downloadHandler(
filename = function() {
paste("filtered_data_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(filtered_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
